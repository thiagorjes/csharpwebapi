{

	"Create One in Repository": {
			"prefix": "crone",
			"body": [
				"public object Create(object p){",
				"\ttry\n\t{",
				"\t\t${1:returntype} r = (context.${1:returntype}.Add((${1:returntype})p)).Entity;",
				"\t\tcontext.SaveChanges();",
				"\t\treturn r;",
				"\t}\n\tcatch(Exception ex)\n\t{",
				"\t\t//Console.WriteLine(ex.Message);",	
				"\t\treturn null;",
				"\t}",
				"}"
			],
			"description": "Creates a 'create method' for repository"
		},
	
	"Read One in Repository": {
			"prefix": "rdone",
			"body": [
				"public object Read(${2:inputtype} ${3:inputname}){",
				"\ttry\n\t{",
				"\t\t${1:returntype} r = (from p in context.${1:returntype} where p.${4:whereAtt}==${3:inputname} select p).FirstOrDefault<${1:returntype}>();",
				"\t\treturn r;",
				"\t}\n\tcatch(Exception ex)\n\t{",
				"\t\t//Console.WriteLine(ex.Message);",	
				"\t\treturn null;",
				"\t}",
				"}"
			],
			"description": "Creates a 'read method' for repository"
		},
	
	"Read Many in Repository": {
			"prefix": "rdmany",
			"body": [
				"public List<object> ${2:methodname}({3:inputtype} ${4:inputname}){",
				"\ttry\n\t{",
				"\t\tList<${1:returntype}> r = (from p in context.${1:returntype} where p.${5:whereAtt}==${4:inputname} select p).ToList<${1:returntype}>();",
				"\t\treturn r;",
				"\t}\n\tcatch(Exception ex)\n\t{",
				"\t\t//Console.WriteLine(ex.Message);",	
				"\t\treturn null;",
				"\t}",
				"}"
			],
			"description": "Creates a 'read many method' for repository"
		},
	
	"Update in Repository": {
			"prefix": "upone",
			"body": [
				"public object Update(${2:inputType} ${3:whereAtt},object newObject ){",
				"\ttry\n\t{",
				"\t\t${1:returntype} r = (from p in context.${1:returntype} where p.${3:whereAtt}==${3:whereAtt} select p).FirstOrDefault<${1:returntype}>();",
				"\t\t//var temp = r.${3:whereAtt};",
				"\t\tr = (${1:returntype}) newObject;",
				"\t\t//r.${3:whereAtt} = temp;",
				"\t\tcontext.Entry(r).State = Microsoft.EntityFrameworkCore.EntityState.Modified;",
				"\t\tcontext.SaveChanges();",
				"\t\treturn r;",
				"\t}\n\tcatch(Exception ex)\n\t{",
				"\t\tConsole.WriteLine(ex.Message);",	
				"\t\treturn null;",
				"\t}",
				"}"
			],
			"description": "Creates a 'update method' for repository"
		},
		
	"Delete in Repository": {
			"prefix": "delone",
			"body": [
				"public string Delete(${1:inputtype} ${2:PK_name}){",
				"\ttry\n\t{",
				"\t\tvar r = (from p in context.${3:DelClass} where p.${2:PK_name}==${2:PK_name} select p).FirstOrDefault<${3:DelClass}>();",
				"\t\tcontext.${3:DelClass}.Remove(r);",
				"\t\tcontext.SaveChanges();",
				"\t\treturn \"${3:DelClass} removido com sucesso!\";",
				"\t}\n\tcatch(Exception ex)\n\t{",
				"\t\tConsole.WriteLine(ex.Message);",	
				"\t\treturn \"Falha ao remover ${3:DelClass}!\";",
				"\t}",
				"}"
			],
			"description": "Creates a 'delete method' for repository"
		},
		"Create Service":{
			"prefix":"createS",
			"body": [
			"[HttpPost]",
			"public IActionResult Create([FromBody]${1:classe} t){",
			"\ttry {",   
			"\t\tvar c = repositorio.Create(t);",
			"\t\tConsole.WriteLine(\"ok \");",
			"\t\treturn this.Ok(c);",
			"\t}",
			"\tcatch (Exception){",
			"\t\tConsole.WriteLine(\"erro\");",
			"\t\treturn BadRequest();",
			"\t}",
			"}"
			],
			"description": "Creates a 'httppost method' for Controller Service"
		},
		"Delete Service":{
			"prefix":"deleteS",
			"body": [
			"[HttpDelete(\"{${1:PK_name}}\")]",
			"public IActionResult Delete(${2:inputType} ${1:PK_name}){",
			"\ttry {",
			"\t\t//Console.WriteLine(\"ok \" + ${1:PK_name});",
			"\t\trepositorio.Delete(${1:PK_name});",
			"\t\treturn this.Ok(\"${3:classe} \" + ${1:PK_name} + \" deletado.\");",
			"\t}",
			"\tcatch (Exception ex){",
			"\t\tConsole.WriteLine(ex.Message);",
			"\t\treturn BadRequest();",
			"\t}",
			"}"
			],
			"description": "Creates a 'httpdelete method' for Controller Service"
		},
		"Update Service":{
			"prefix":"updateS",
			"body": [
			"[HttpPut(\"{${1:PK_name}}\")]",
			"public IActionResult Update(${2:inputype} ${1:PK_name},[FromBody]${3:class} newObject){",
			"\ttry {",
			"\t\tvar c = repositorio.Update(${1:PK_name}, newObject );",
			"\t\treturn this.Ok(c);",
			"\t}",
			"\tcatch (Exception ex){",
			"\t\tConsole.WriteLine(ex.Message);",
			"\t\treturn BadRequest();",
			"\t}",
			"}"
			],
			"description": "Creates a 'httpput method' for Controller Service"
		},
		"Read Service":{
			"prefix":"readS",
			"body": [
			"[HttpGet(\"{${1:PK_name}}\")]",
			"public IActionResult Read(${2:inputType} ${1:PK_name}){",
			"\ttry {",
			"\t\treturn this.Ok(repositorio.Read(${1:PK_name}));",
			"\t}",
			"\tcatch (Exception ex){",
			"\t\tConsole.WriteLine(ex.Message);",	
			"\t\treturn null;",
			"\t}",
			"}"
			],
			"description": "Creates a 'httpget method' for Controller Service"
		},
		"Read Many-From Service":{
			"prefix": "readlistS",
			"body": [
			"[HttpGet(\"${1:child}${2:from}/{${3:prefix}${4:parent}}\")]",
			"public IEnumerable<${1:child}> ${1:child}ById${4:parent}(int ${3:prefix}${4:parent}){",
			"\treturn repositorio.${1:child}ById${4:parent}(${3:prefix}${4:parent});",
			"}"
			],
			"description": "Creates a '(children from) httpget method' for Controller Service"
		},
		"Read Many Service":{
			"prefix": "readAllS",
			"body": [
			"[HttpGet]",
			"public IEnumerable<${1:returnType}> ${1:returnType}All(){",
			"\treturn repositorio.${1:returnType}All;",
			"}"
			],
			"description": "Creates a '(children from) httpget method' for Controller Service"
		},
		"Create Controller class":{
			"prefix": "CtrlClass",
			"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Mvc;",
			"using ${WORKSPACE_NAME}.Models;",
			"using ${WORKSPACE_NAME}.Services;",
	
			"namespace ${WORKSPACE_NAME}.Controllers",
			"{",
			"\t[Route(\"${WORKSPACE_NAME}/[controller]\")]",
			"\tpublic class ${TM_FILENAME_BASE} : Controller",
			"\t{",
			"\t\t${TM_FILENAME_BASE/Controller//}Repository repositorio;",
			"\t\tpublic ${TM_FILENAME_BASE/Controller//}Controller(){",
			"\t\t\trepositorio = new ${TM_FILENAME_BASE/Controller//}Repository(new ${1:context}Context());",
			"\t\t}",
			"\t\t[HttpPost]",
			"\t\tpublic IActionResult Create([FromBody]${TM_FILENAME_BASE/Controller//} t){",
			"\t\t\ttry {",   
			"\t\t\t\tvar c = repositorio.Create(t);",
			"\t\t\t\tConsole.WriteLine(\"ok \");",
			"\t\t\t\treturn this.Ok(c);",
			"\t\t\t}",
			"\t\t\tcatch (Exception){",
			"\t\t\t\tConsole.WriteLine(\"erro\");",
			"\t\t\t\treturn BadRequest();",
			"\t\t\t}",
			"\t\t}",
			"\t\t[HttpGet(\"{${2:PK_name}}\")]",
			"\t\tpublic IActionResult Read(${5:PK_Type} ${2:PK_name}){",
			"\t\t\ttry {",
			"\t\t\t\treturn this.Ok(repositorio.Read(${2:PK_name}));",
			"\t\t\t}",
			"\t\t\tcatch (Exception ex){",
			"\t\t\t\tConsole.WriteLine(ex.Message);",	
			"\t\t\t\treturn null;",
			"\t\t\t}",
			"\t\t}",
			"\t\t[HttpPut(\"{${2:PK_name}}\")]",
			"\t\tpublic IActionResult Update(${5:PK_Type} ${2:PK_name},[FromBody]${TM_FILENAME_BASE/Controller//} newObject){",
			"\t\t\ttry {",
			"\t\t\t\tvar c = repositorio.Update(${2:PK_name}, newObject );",
			"\t\t\t\treturn this.Ok(c);",
			"\t\t\t}",
			"\t\t\tcatch (Exception ex){",
			"\t\t\t\tConsole.WriteLine(ex.Message);",
			"\t\t\t\treturn BadRequest();",
			"\t\t\t}",
			"\t\t}",
			"\t\t[HttpDelete(\"{${2:PK_name}}\")]",
			"\t\tpublic IActionResult Delete(${5:PK_Type} ${2:PK_name}){",
			"\t\t\ttry {",
			"\t\t\t\t//Console.WriteLine(\"ok \" + ${2:PK_name});",
			"\t\t\t\trepositorio.Delete(${2:PK_name});",
			"\t\t\t\treturn this.Ok(\"${TM_FILENAME_BASE/Controller//} \" + ${2:PK_name} + \" deletado.\");",
			"\t\t\t}",
			"\t\t\tcatch (Exception ex){",
			"\t\t\t\tConsole.WriteLine(ex.Message);",
			"\t\t\t\treturn BadRequest();",
			"\t\t\t}",
			"\t\t}",
			"\t\t[HttpGet]",
			"\t\tpublic IEnumerable<object> ${TM_FILENAME_BASE/Controller//}All(){",
			"\t\t\treturn repositorio.${TM_FILENAME_BASE/Controller//}All();",
			"\t\t}",
			"\t}",
			"}"
			],
			"description": "Creates a Controller Service Class"
		},
		"Create Repository Interface":{
			"prefix": "RepoInterface",
			"body":[
			"using System.Collections.Generic;",
			"namespace ${WORKSPACE_NAME}.Interfaces",
			"{",
			"\tpublic interface IGenericRepository",
			"\t{",
			"\t\tIEnumerable<object> All { get; }",
			"\t\tobject Read(int id);",
			"\t\tobject Create(object t);",
			"\t\tstring Delete(int id);",
			"\t\tobject Update(int id, object newAll);",
			"\t} //Nada mais a ser feito aqui!!!  -- Nothing more to do here!!!",
			"}"
			]
		},
		"Create Repository Class":{
			"prefix": "RepoClass",
			"body":[
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using ${WORKSPACE_NAME}.Models;",
			"using ${WORKSPACE_NAME}.Interfaces;",
			"namespace ${WORKSPACE_NAME}.Services",
			"{",
			"\tpublic class ${TM_FILENAME_BASE} : IGenericRepository",
			"\t{",
			"\t\tprivate ${1:context}Context context;",
			"\t\tprivate List<${TM_FILENAME_BASE/Repository//}> _all;",		
			"\t\tpublic ${TM_FILENAME_BASE/Repository//}Repository(${1:context}Context ctx)",
			"\t\t{",
			"\t\t\tInitializeData(ctx);",
			"\t\t}",
			"\t\tprivate void InitializeData(${1:context}Context ctx)",
			"\t\t{",
			"\t\t\tcontext = ctx;",
			"\t\t\t_all = context.${TM_FILENAME_BASE/Repository//}.ToList();",
			"\t\t}",
			"\t\tIEnumerable<object> IGenericRepository.All",
			"\t\t{",
			"\t\t\tget",
			"\t\t\t{",
			"\t\t\t\treturn _all;",
			"\t\t\t}",
			"\t\t}",
			"\t\tpublic object Create(object p){",
			"\t\t\ttry\n\t\t\t{",
			"\t\t\t\t${TM_FILENAME_BASE/Repository//} r = (context.${TM_FILENAME_BASE/Repository//}.Add((${TM_FILENAME_BASE/Repository//})p)).Entity;",
			"\t\t\t\tcontext.SaveChanges();",
			"\t\t\t\treturn r;",
			"\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{",
			"\t\t\t\tConsole.WriteLine(ex.Message);",	
			"\t\t\t\treturn null;",
			"\t\t\t}",
			"\t\t}",
			"\t\tpublic object Read(${2:inputtype} ${3:PK_name}){",
			"\t\t\ttry\n\t\t\t{",
			"\t\t\t\t${TM_FILENAME_BASE/Repository//} r = (from p in context.${TM_FILENAME_BASE/Repository//} where p.${3:PK_name}==${3:PK_name} select p).FirstOrDefault<${TM_FILENAME_BASE/Repository//}>();",
			"\t\t\t\treturn r;",
			"\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{",
			"\t\t\t\tConsole.WriteLine(ex.Message);",	
			"\t\t\t\treturn null;",
			"\t\t\t}",
			"\t\t}",
			"\t\tpublic object Update(${2:inputtype} ${3:PK_name},object newObject ){",
			"\t\t\ttry\n\t\t\t{",
			"\t\t\t\t${TM_FILENAME_BASE/Repository//} r = (from p in context.${TM_FILENAME_BASE/Repository//} where p.${3:PK_name}==${3:PK_name} select p).FirstOrDefault<${TM_FILENAME_BASE/Repository//}>();",
			"\t\t\t\tforeach(var att in ((${TM_FILENAME_BASE/Repository//}) newObject).GetType().GetProperties()){",
			"\t\t\t\tif(!att.Name.Equals(\"${3:PK_name}\"))r.GetType().GetProperty(att.Name).SetValue(r,att.GetValue(newObject));",
			"\t\t\t\t}",
			"\t\t\t\tcontext.Entry(r).State = Microsoft.EntityFrameworkCore.EntityState.Modified;",
			"\t\t\tcontext.SaveChanges();",
			"\t\t\treturn r;",
			"\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{",
			"\t\t\t\tConsole.WriteLine(ex.Message);",	
			"\t\t\t\treturn null;",
			"\t\t\t}",
			"\t\t}",
			"\t\tpublic string Delete(${2:inputtype} ${3:PK_name}){",
			"\t\t\ttry\n\t\t\t{",
			"\t\t\t\tvar r = (from p in context.${TM_FILENAME_BASE/Repository//} where p.${3:PK_name}==${3:PK_name} select p).FirstOrDefault<${TM_FILENAME_BASE/Repository//}>();",
			"\t\t\t\tcontext.${TM_FILENAME_BASE/Repository//}.Remove(r);",
			"\t\t\t\tcontext.SaveChanges();",
			"\t\t\t\treturn \"${TM_FILENAME_BASE/Repository//} removido com sucesso!\";",
			"\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{",
			"\t\t\t\tConsole.WriteLine(ex.Message);",	
			"\t\t\t\treturn \"Falha ao remover ${TM_FILENAME_BASE/Repository//}!\";",
			"\t\t\t}",
			"\t\t}",
			"\t\tpublic List<object> ReadManyByParam(${4:paramType} ${5:paramName}){",
			"\t\t\ttry\n\t\t\t{",
			"\t\t\t\tList<object> r = (from p in context.${TM_FILENAME_BASE/Repository//} where p.${5:paramName}==${5:paramName} select p).ToList<object>();",
			"\t\t\t\treturn r;",
			"\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{",
			"\t\t\t\tConsole.WriteLine(ex.Message);",	
			"\t\t\t\treturn null;",
			"\t\t\t}",
			"\t\t}",
			"\t\tpublic List<object> ${TM_FILENAME_BASE/Repository//}All(){",
			"\t\treturn _all.ToList<object>();",
			"\t\t}",
			"\t}",
			"}"
			]
		},
		"Create Model Class":{
			"prefix": "ModelClass",
			"body":[
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using ${WORKSPACE_NAME}.Interfaces;",
			"namespace ${WORKSPACE_NAME}.Models;",
			"{",
			"\tpublic class ${TM_FILENAME_BASE}",
			"\t{",
			"\t\tpublic ${TM_FILENAME_BASE}()",
			"\t\t{",
			"\t\t\tConsole.WriteLine(\"Empty Class\");",
			"\t\t}",
			"\t}",
			"}"
			]
		},
		"Empty Construtor":{
			"prefix": "constructor",
			"body":[
				"public ${1:className}()",
				"{",
				"}"
			]
		}
	
	
	}